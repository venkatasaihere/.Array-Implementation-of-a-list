#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Structure to represent a stack node
typedef struct StackNode {
    int data;
    struct StackNode* next;
} StackNode;

// Function to create a new stack node
StackNode* createStackNode(int data) {
    StackNode* newNode = (StackNode*) malloc(sizeof(StackNode));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to check if the stack is empty
int isEmpty(StackNode* top) {
    return top == NULL;
}

// Function to push an element onto the stack
void push(StackNode** top, int data) {
    StackNode* newNode = createStackNode(data);
    if (*top) {
        newNode->next = *top;
    }
    *top = newNode;
}

// Function to pop an element from the stack
int pop(StackNode** top) {
    if (isEmpty(*top)) {
        printf("Stack is empty\n");
        return -1;
    }
    int data = (*top)->data;
    StackNode* temp = *top;
    *top = (*top)->next;
    free(temp);
    return data;
}

// Function to evaluate a postfix expression
int evaluatePostfix(char* expression) {
    StackNode* top = NULL;
    for (int i = 0; i < strlen(expression); i++) {
        if (isdigit(expression[i])) {
            // Push the operand onto the stack
            push(&top, expression[i] - '0');
        } else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {
            // Pop the top two elements from the stack
            int operand2 = pop(&top);
            int operand1 = pop(&top);
            int result;
            switch (expression[i]) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
            }
            // Push the result onto the stack
            push(&top, result);
        }
    }
    // The final result is the only element left in the stack
    return pop(&top);
}

int main() {
    char expression[] = "23+4*";
    printf("Postfix expression: %s\n", expression);
    printf("Result: %d\n", evaluatePostfix(expression));
    return 0;
}

output:
Postfix expression: 23+4*
Result: 20
